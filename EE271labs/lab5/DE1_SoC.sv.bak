module DE1_SoC (CLOCK_50, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, KEY, LEDR, SW);   
 input  logic         CLOCK_50; // 50MHz clock.  
 output logic  [6:0]  HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;    
 output logic  [9:0]  LEDR;    
 input  logic  [3:0]  KEY; // True when not pressed, False when pressed  
 input  logic  [9:0]  SW;      
  
 // Generate clk off of CLOCK_50, whichClock picks rate.  
  
 logic reset; 
 logic [31:0] div_clk;  
  
 assign reset = SW[9]; 
 parameter whichClock = 25; // 0.75 Hz clock 
 clock_divider cdiv (.clock(CLOCK_50),  
                       .reset(reset),  
                       .divided_clocks(div_clk));   
  
 //  Clock  selection;  allows  for  easy  switching  between  simulation  and  board 
clocks 
 logic clkSelect; 
 // Uncomment ONE of the following two lines depending on intention 
  
 //assign clkSelect = CLOCK_50;          // for simulation 
 assign clkSelect = div_clk[whichClock]; // for board 
 
 // Set up FSM inputs and outputs.  
 logic w, out;  
 assign w = SW[0]; // input is SW[0] 
   
 simple s (.clk(clkSelect), .reset, .w, .out);   
  
 // Show signals on LEDRs so we can see what is happening  
 assign LEDR[9] = clkSelect; 
 assign LEDR[8] = reset; 
 assign LEDR[0] = out; 
   
endmodule 